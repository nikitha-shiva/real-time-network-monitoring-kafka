# Real-Time Network Monitoring - Docker Compose
# Complete containerized setup for local development and testing

version: '3.8'

services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: network-monitoring-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - network-monitoring
    restart: unless-stopped

  # Kafka broker for log streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: network-monitoring-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      
      # Network configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      
      # Performance tuning
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      
      # Log configuration
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_COMPRESSION_TYPE: snappy
      
      # Network threads optimization
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - network-monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for management and monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: network-monitoring-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: network-monitoring
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - network-monitoring
    restart: unless-stopped

  # Spark Master
  spark-master:
    image: bitnami/spark:3.4.1
    container_name: network-monitoring-spark-master
    ports:
      - "8081:8080"  # Spark Master UI
      - "7077:7077"  # Spark Master port
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=zookeeper:2181 -Dspark.deploy.zookeeper.dir=/spark"
    volumes:
      - spark-master-data:/opt/bitnami/spark/data
      - ./src:/opt/spark-apps
      - ./config:/opt/spark-config
    networks:
      - network-monitoring
    restart: unless-stopped

  # Spark Worker 1
  spark-worker-1:
    image: bitnami/spark:3.4.1
    container_name: network-monitoring-spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8082:8081"  # Spark Worker UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark-worker-1-data:/opt/bitnami/spark/data
      - ./src:/opt/spark-apps
      - ./config:/opt/spark-config
    networks:
      - network-monitoring
    restart: unless-stopped

  # Spark Worker 2
  spark-worker-2:
    image: bitnami/spark:3.4.1
    container_name: network-monitoring-spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8083:8081"  # Spark Worker UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark-worker-2-data:/opt/bitnami/spark/data
      - ./src:/opt/spark-apps
      - ./config:/opt/spark-config
    networks:
      - network-monitoring
    restart: unless-stopped

  # PostgreSQL for metadata and configuration
  postgres:
    image: postgres:15-alpine
    container_name: network-monitoring-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: network_monitoring
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - network-monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: network-monitoring-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - network-monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: network-monitoring-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - network-monitoring
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: network-monitoring-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - network-monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # Network Log Simulator (for testing)
  log-simulator:
    build:
      context: .
      dockerfile: docker/Dockerfile.simulator
    container_name: network-monitoring-log-simulator
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - LOG_GENERATION_RATE=100  # logs per minute
      - SIMULATION_DURATION=3600  # 1 hour
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    networks:
      - network-monitoring
    restart: unless-stopped

  # Network Monitoring Application
  network-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    container_name: network-monitoring-app
    depends_on:
      - kafka
      - spark-master
      - postgres
      - redis
    ports:
      - "8000:8000"  # FastAPI application
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPARK_MASTER_URL=spark://spark-master:7077
      - POSTGRES_URL=postgresql://postgres:postgres123@postgres:5432/network_monitoring
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - network-monitoring
    restart: unless-stopped

  # Tableau Server (optional - for production visualization)
  # Uncomment if you have Tableau Server license
  # tableau-server:
  #   image: tableau/tableau-server:latest
  #   container_name: network-monitoring-tableau
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   environment:
  #     - TSM_ADMIN_USER=admin
  #     - TSM_ADMIN_PASS=admin123
  #   volumes:
  #     - tableau-data:/var/opt/tableau/tableau_server
  #   networks:
  #     - network-monitoring
  #   restart: unless-stopped

# Named volumes for data persistence
volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  spark-master-data:
    driver: local
  spark-worker-1-data:
    driver: local
  spark-worker-2-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  tableau-data:
    driver: local

# Custom network for service communication
networks:
  network-monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
